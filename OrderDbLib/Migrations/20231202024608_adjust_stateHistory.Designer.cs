// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrderDbLib;

#nullable disable

namespace OrderDbLib.Migrations
{
    [DbContext(typeof(OrderDbContext))]
    [Migration("20231202024608_adjust_stateHistory")]
    partial class adjust_stateHistory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OrderDbLib.Entities.DeliveryOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long>("DeletedAt")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MyState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RiderId")
                        .HasColumnType("bigint");

                    b.Property<string>("StateHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubState")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RiderId");

                    b.HasIndex("UserId");

                    b.ToTable("DeliveryOrders");
                });

            modelBuilder.Entity("OrderDbLib.Entities.Lingau", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<float>("Credit")
                        .HasColumnType("real");

                    b.Property<long>("DeletedAt")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("UserRefId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserRefId")
                        .IsUnique()
                        .HasFilter("[UserRefId] IS NOT NULL");

                    b.ToTable("Lingaus");
                });

            modelBuilder.Entity("OrderDbLib.Entities.Report", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long>("DeletedAt")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeliveryOrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("ImpactDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncidentDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TimeOfOccurrence")
                        .HasColumnType("bigint");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryOrderId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("OrderDbLib.Entities.Rider", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long>("DeletedAt")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWorking")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Riders");
                });

            modelBuilder.Entity("OrderDbLib.Entities.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long>("DeletedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("OrderDbLib.Entities.Tag_Do", b =>
                {
                    b.Property<long>("DeliveryOrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long>("DeletedAt")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("DeliveryOrderId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("Tag_dos");
                });

            modelBuilder.Entity("OrderDbLib.Entities.Tag_Report", b =>
                {
                    b.Property<long>("ReportId")
                        .HasColumnType("bigint");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long>("DeletedAt")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("ReportId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("Tag_reports");
                });

            modelBuilder.Entity("OrderDbLib.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long>("DeletedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LingauId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LingauId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OrderDbLib.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OrderDbLib.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderDbLib.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OrderDbLib.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderDbLib.Entities.DeliveryOrder", b =>
                {
                    b.HasOne("OrderDbLib.Entities.Rider", "Rider")
                        .WithMany()
                        .HasForeignKey("RiderId");

                    b.HasOne("OrderDbLib.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("OrderDbLib.Entities.DeliveryInfo", "DeliveryInfo", b1 =>
                        {
                            b1.Property<long>("DeliveryOrderId")
                                .HasColumnType("bigint");

                            b1.Property<float>("Distance")
                                .HasColumnType("real");

                            b1.HasKey("DeliveryOrderId");

                            b1.ToTable("DeliveryOrders");

                            b1.WithOwner()
                                .HasForeignKey("DeliveryOrderId");

                            b1.OwnsOne("OrderDbLib.Entities.Location", "EndLocation", b2 =>
                                {
                                    b2.Property<long>("DeliveryInfoDeliveryOrderId")
                                        .HasColumnType("bigint");

                                    b2.Property<string>("Address")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<double>("Latitude")
                                        .HasColumnType("float");

                                    b2.Property<double>("Longitude")
                                        .HasColumnType("float");

                                    b2.Property<string>("PlaceId")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("DeliveryInfoDeliveryOrderId");

                                    b2.ToTable("DeliveryOrders");

                                    b2.WithOwner()
                                        .HasForeignKey("DeliveryInfoDeliveryOrderId");
                                });

                            b1.OwnsOne("OrderDbLib.Entities.Location", "StartLocation", b2 =>
                                {
                                    b2.Property<long>("DeliveryInfoDeliveryOrderId")
                                        .HasColumnType("bigint");

                                    b2.Property<string>("Address")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<double>("Latitude")
                                        .HasColumnType("float");

                                    b2.Property<double>("Longitude")
                                        .HasColumnType("float");

                                    b2.Property<string>("PlaceId")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("DeliveryInfoDeliveryOrderId");

                                    b2.ToTable("DeliveryOrders");

                                    b2.WithOwner()
                                        .HasForeignKey("DeliveryInfoDeliveryOrderId");
                                });

                            b1.Navigation("EndLocation")
                                .IsRequired();

                            b1.Navigation("StartLocation")
                                .IsRequired();
                        });

                    b.OwnsOne("OrderDbLib.Entities.ItemInfo", "ItemInfo", b1 =>
                        {
                            b1.Property<long>("DeliveryOrderId")
                                .HasColumnType("bigint");

                            b1.Property<float>("Height")
                                .HasColumnType("real");

                            b1.Property<float>("Length")
                                .HasColumnType("real");

                            b1.Property<int>("Quantity")
                                .HasColumnType("int");

                            b1.Property<string>("Remark")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("Volume")
                                .HasColumnType("float");

                            b1.Property<float>("Weight")
                                .HasColumnType("real");

                            b1.Property<float>("Width")
                                .HasColumnType("real");

                            b1.HasKey("DeliveryOrderId");

                            b1.ToTable("DeliveryOrders");

                            b1.WithOwner()
                                .HasForeignKey("DeliveryOrderId");
                        });

                    b.OwnsOne("OrderDbLib.Entities.PaymentInfo", "PaymentInfo", b1 =>
                        {
                            b1.Property<long>("DeliveryOrderId")
                                .HasColumnType("bigint");

                            b1.Property<float>("Charge")
                                .HasColumnType("real");

                            b1.Property<float>("Fee")
                                .HasColumnType("real");

                            b1.Property<bool>("IsReceived")
                                .HasColumnType("bit");

                            b1.Property<string>("Method")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Reference")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TransactionId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DeliveryOrderId");

                            b1.ToTable("DeliveryOrders");

                            b1.WithOwner()
                                .HasForeignKey("DeliveryOrderId");
                        });

                    b.OwnsOne("OrderDbLib.Entities.ReceiverInfo", "ReceiverInfo", b1 =>
                        {
                            b1.Property<long>("DeliveryOrderId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("NormalizedPhoneNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("DeliveryOrderId");

                            b1.HasIndex("UserId");

                            b1.ToTable("DeliveryOrders");

                            b1.WithOwner()
                                .HasForeignKey("DeliveryOrderId");

                            b1.HasOne("OrderDbLib.Entities.User", "User")
                                .WithMany()
                                .HasForeignKey("UserId");

                            b1.Navigation("User");
                        });

                    b.OwnsOne("OrderDbLib.Entities.SenderInfo", "SenderInfo", b1 =>
                        {
                            b1.Property<long>("DeliveryOrderId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("NormalizedPhoneNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("DeliveryOrderId");

                            b1.HasIndex("UserId");

                            b1.ToTable("DeliveryOrders");

                            b1.WithOwner()
                                .HasForeignKey("DeliveryOrderId");

                            b1.HasOne("OrderDbLib.Entities.User", "User")
                                .WithMany()
                                .HasForeignKey("UserId");

                            b1.Navigation("User");
                        });

                    b.Navigation("DeliveryInfo")
                        .IsRequired();

                    b.Navigation("ItemInfo")
                        .IsRequired();

                    b.Navigation("PaymentInfo");

                    b.Navigation("ReceiverInfo")
                        .IsRequired();

                    b.Navigation("Rider");

                    b.Navigation("SenderInfo")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrderDbLib.Entities.Lingau", b =>
                {
                    b.HasOne("OrderDbLib.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("OrderDbLib.Entities.Lingau", "UserRefId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OrderDbLib.Entities.Report", b =>
                {
                    b.HasOne("OrderDbLib.Entities.DeliveryOrder", null)
                        .WithMany("Reports")
                        .HasForeignKey("DeliveryOrderId");

                    b.OwnsOne("OrderDbLib.Entities.ReportResolve", "Resolve", b1 =>
                        {
                            b1.Property<long>("ReportId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("OrderStatus")
                                .HasColumnType("int");

                            b1.Property<int>("PaymentStatus")
                                .HasColumnType("int");

                            b1.HasKey("ReportId");

                            b1.ToTable("Reports");

                            b1.WithOwner()
                                .HasForeignKey("ReportId");
                        });

                    b.Navigation("Resolve");
                });

            modelBuilder.Entity("OrderDbLib.Entities.Rider", b =>
                {
                    b.HasOne("OrderDbLib.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrderDbLib.Entities.Tag_Do", b =>
                {
                    b.HasOne("OrderDbLib.Entities.DeliveryOrder", "DeliveryOrder")
                        .WithMany("Tag_Dos")
                        .HasForeignKey("DeliveryOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderDbLib.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryOrder");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("OrderDbLib.Entities.Tag_Report", b =>
                {
                    b.HasOne("OrderDbLib.Entities.Report", "Report")
                        .WithMany("Tag_Reports")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderDbLib.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("OrderDbLib.Entities.User", b =>
                {
                    b.HasOne("OrderDbLib.Entities.Lingau", "Lingau")
                        .WithMany()
                        .HasForeignKey("LingauId");

                    b.Navigation("Lingau");
                });

            modelBuilder.Entity("OrderDbLib.Entities.DeliveryOrder", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("Tag_Dos");
                });

            modelBuilder.Entity("OrderDbLib.Entities.Report", b =>
                {
                    b.Navigation("Tag_Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
